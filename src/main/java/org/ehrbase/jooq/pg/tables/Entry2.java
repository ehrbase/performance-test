/*
 * Copyright (c) 2022 vitasystems GmbH and Hannover Medical School.
 *
 * This file is part of project EHRbase
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ehrbase.jooq.pg.tables;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.tables.records.Entry2Record;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Entry2 extends TableImpl<Entry2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ehr.entry2</code>
     */
    public static final Entry2 ENTRY2 = new Entry2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Entry2Record> getRecordType() {
        return Entry2Record.class;
    }

    /**
     * The column <code>ehr.entry2.ehr_id</code>.
     */
    public final TableField<Entry2Record, UUID> EHR_ID = createField(DSL.name("ehr_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.entry2.comp_id</code>.
     */
    public final TableField<Entry2Record, UUID> COMP_ID =
            createField(DSL.name("comp_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.entry2.num</code>.
     */
    public final TableField<Entry2Record, Integer> NUM =
            createField(DSL.name("num"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ehr.entry2.entity_concept</code>.
     */
    public final TableField<Entry2Record, String> ENTITY_CONCEPT =
            createField(DSL.name("entity_concept"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.entry2.rm_entity</code>.
     */
    public final TableField<Entry2Record, String> RM_ENTITY =
            createField(DSL.name("rm_entity"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.entry2.entity_path</code>.
     */
    public final TableField<Entry2Record, String> ENTITY_PATH =
            createField(DSL.name("entity_path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.entry2.entity_idx</code>.
     */
    public final TableField<Entry2Record, Integer[]> ENTITY_IDX =
            createField(DSL.name("entity_idx"), SQLDataType.INTEGER.getArrayDataType(), this, "");

    /**
     * The column <code>ehr.entry2.field_idx</code>.
     */
    public final TableField<Entry2Record, Integer[]> FIELD_IDX =
            createField(DSL.name("field_idx"), SQLDataType.INTEGER.getArrayDataType(), this, "");

    /**
     * The column <code>ehr.entry2.field_idx_len</code>.
     */
    public final TableField<Entry2Record, Integer> FIELD_IDX_LEN =
            createField(DSL.name("field_idx_len"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ehr.entry2.fields</code>.
     */
    public final TableField<Entry2Record, JSONB> FIELDS = createField(DSL.name("fields"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>ehr.entry2.template_id</code>.
     */
    public final TableField<Entry2Record, String> TEMPLATE_ID =
            createField(DSL.name("template_id"), SQLDataType.CLOB, this, "");

    private Entry2(Name alias, Table<Entry2Record> aliased) {
        this(alias, aliased, null);
    }

    private Entry2(Name alias, Table<Entry2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ehr.entry2</code> table reference
     */
    public Entry2(String alias) {
        this(DSL.name(alias), ENTRY2);
    }

    /**
     * Create an aliased <code>ehr.entry2</code> table reference
     */
    public Entry2(Name alias) {
        this(alias, ENTRY2);
    }

    /**
     * Create a <code>ehr.entry2</code> table reference
     */
    public Entry2() {
        this(DSL.name("entry2"), null);
    }

    public <O extends Record> Entry2(Table<O> child, ForeignKey<O, Entry2Record> key) {
        super(child, key, ENTRY2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ARCHETYPE_IDX, Indexes.TYPE_IDX);
    }

    @Override
    public UniqueKey<Entry2Record> getPrimaryKey() {
        return Keys.ENTRY2_PKEY;
    }

    @Override
    public List<ForeignKey<Entry2Record, ?>> getReferences() {
        return Arrays.asList(Keys.ENTRY2__ENTRY2_EHR_ID_FKEY);
    }

    private transient org.ehrbase.jooq.pg.tables.Ehr _ehr;

    /**
     * Get the implicit join path to the <code>ehr.ehr</code> table.
     */
    public org.ehrbase.jooq.pg.tables.Ehr ehr() {
        if (_ehr == null) _ehr = new org.ehrbase.jooq.pg.tables.Ehr(this, Keys.ENTRY2__ENTRY2_EHR_ID_FKEY);

        return _ehr;
    }

    @Override
    public Entry2 as(String alias) {
        return new Entry2(DSL.name(alias), this);
    }

    @Override
    public Entry2 as(Name alias) {
        return new Entry2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry2 rename(String name) {
        return new Entry2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry2 rename(Name name) {
        return new Entry2(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, UUID, Integer, String, String, String, Integer[], Integer[], Integer, JSONB, String>
            fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}

/*
 * Copyright (c) 2022 vitasystems GmbH and Hannover Medical School.
 *
 * This file is part of project EHRbase
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ehrbase.jooq.pg.tables.records;

import java.util.UUID;
import org.ehrbase.jooq.pg.tables.PartyUsageIdentification;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PartyUsageIdentificationRecord extends TableRecordImpl<PartyUsageIdentificationRecord>
        implements Record2<UUID, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ehr.party_usage_identification.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>ehr.party_usage_identification.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>ehr.party_usage_identification.entity</code>.
     */
    public void setEntity(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>ehr.party_usage_identification.entity</code>.
     */
    public String getEntity() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return PartyUsageIdentification.PARTY_USAGE_IDENTIFICATION.ID;
    }

    @Override
    public Field<String> field2() {
        return PartyUsageIdentification.PARTY_USAGE_IDENTIFICATION.ENTITY;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getEntity();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getEntity();
    }

    @Override
    public PartyUsageIdentificationRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public PartyUsageIdentificationRecord value2(String value) {
        setEntity(value);
        return this;
    }

    @Override
    public PartyUsageIdentificationRecord values(UUID value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PartyUsageIdentificationRecord
     */
    public PartyUsageIdentificationRecord() {
        super(PartyUsageIdentification.PARTY_USAGE_IDENTIFICATION);
    }

    /**
     * Create a detached, initialised PartyUsageIdentificationRecord
     */
    public PartyUsageIdentificationRecord(UUID id, String entity) {
        super(PartyUsageIdentification.PARTY_USAGE_IDENTIFICATION);

        setId(id);
        setEntity(entity);
    }
}

/*
 * Copyright (c) 2022 vitasystems GmbH and Hannover Medical School.
 *
 * This file is part of project EHRbase
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ehrbase.webtester.service.loader.jooq;

import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.Internal;
import org.jooq.impl.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LoaderState extends TableImpl<LoaderStateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ehr.loader_state</code>
     */
    public static final LoaderState LOADER_STATE = new LoaderState();
    public static final UniqueKey<LoaderStateRecord> LOADER_STATE_PKEY = Internal.createUniqueKey(
            LoaderState.LOADER_STATE, DSL.name("loader_state_pkey"), new TableField[] {LoaderState.LOADER_STATE.ID}, true);
    public static final UniqueKey<LoaderStateRecord> LOADER_STATE_KEY_UNIQUE = Internal.createUniqueKey(
            LoaderState.LOADER_STATE, DSL.name("loader_state_key_unique"), new TableField[] {LoaderState.LOADER_STATE.KEY}, true);
    public static final SchemaImpl SCHEMA = new SchemaImpl("public");

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoaderStateRecord> getRecordType() {
        return LoaderStateRecord.class;
    }

    /**
     * The column <code>ehr.loader_state.ehr_id</code>.
     */
    public final TableField<LoaderStateRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.loader_state.entity_concept</code>.
     */
    public final TableField<LoaderStateRecord, String> KEY =
            createField(DSL.name("key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.loader_state.rm_entity</code>.
     */
    public final TableField<LoaderStateRecord, String> VALUE =
            createField(DSL.name("value"), SQLDataType.CLOB, this, "");



    private LoaderState(Name alias, Table<LoaderStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private LoaderState(Name alias, Table<LoaderStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ehr.loader_state</code> table reference
     */
    public LoaderState(String alias) {
        this(DSL.name(alias), LOADER_STATE);
    }

    /**
     * Create an aliased <code>ehr.loader_state</code> table reference
     */
    public LoaderState(Name alias) {
        this(alias, LOADER_STATE);
    }

    /**
     * Create a <code>ehr.loader_state</code> table reference
     */
    public LoaderState() {
        this(DSL.name("loader_state"), null);
    }

    public <O extends Record> LoaderState(Table<O> child, ForeignKey<O, LoaderStateRecord> key) {
        super(child, key, LOADER_STATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return new ArrayList<>();
    }

    @Override
    public UniqueKey<LoaderStateRecord> getPrimaryKey() {
        return LOADER_STATE_PKEY;
    }

    @Override
    public List<UniqueKey<LoaderStateRecord>> getUniqueKeys() {
        return Arrays.asList(LOADER_STATE_KEY_UNIQUE);
    }

    @Override
    public List<ForeignKey<LoaderStateRecord, ?>> getReferences() {
        return new ArrayList<>();
    }

    @Override
    public LoaderState as(String alias) {
        return new LoaderState(DSL.name(alias), this);
    }

    @Override
    public LoaderState as(Name alias) {
        return new LoaderState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LoaderState rename(String name) {
        return new LoaderState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LoaderState rename(Name name) {
        return new LoaderState(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
